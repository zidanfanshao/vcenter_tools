package com.example.vcentertools.model;

import cn.hutool.http.HttpRequest;
import cn.hutool.http.HttpResponse;

public class VulnerabilityScanner {

    /**
     * 执行漏洞检测
     * @param targetUrl 目标 URL
     * @param vulnerability 漏洞类型
     * @return 漏洞扫描结果
     */
    public String scanForVulnerabilities(String targetUrl, String vulnerability) {
        StringBuilder result = new StringBuilder();

        try {
            if ("ALL".equals(vulnerability)) {
                result.append(scanForCVE202122005(targetUrl)).append("\n");
                result.append(scanForCVE202121972(targetUrl)).append("\n");
                result.append(scanForCVE202121985(targetUrl)).append("\n");
            }else if ("CVE-2021-22005".equals(vulnerability)) {
                result.append(scanForCVE202122005(targetUrl)).append("\n");
            } else if ("CVE-2021-21972".equals(vulnerability)) {
                result.append(scanForCVE202121972(targetUrl)).append("\n");
            } else if ("CVE-2021-21985".equals(vulnerability)) {
                result.append(scanForCVE202121985(targetUrl)).append("\n");
            }else {
                result.append(" [-] 未知漏洞类型\n");
            }
        } catch (Exception e) {
            result.append(" [-] 检测过程中发生异常: ").append(e.getMessage()).append("\n");
        }
        return result.toString();
    }

    /**
     * CVE-2021-22005 漏洞检测
     * @param targetUrl 目标 URL
     * @return 漏洞检测结果
     */
    private String scanForCVE202122005(String targetUrl) {
        try {
            String url = targetUrl + "/analytics/telemetry/ph/api/level?_c=test";
            HttpResponse response = HttpRequest.get(url)
                    .timeout(5000)
                    .execute();
            int statusCode = response.getStatus();
            String body = response.body();

            if (statusCode == 200) {
                return " [+] 目标存在 CVE-2021-22005 漏洞!";
            } else {
                return " [-] 目标未发现 CVE-2021-22005 漏洞";
            }
        } catch (Exception e) {
            return " [-] 检测 CVE-2021-22005 时发生错误: " + e.getMessage();
        }
    }

    /**
     * CVE-2021-21972 漏洞检测
     * @param targetUrl 目标 URL
     * @return 漏洞检测结果
     */
    private String scanForCVE202121972(String targetUrl) {
        try{
            String url1 = targetUrl + "/ui/vropspluginui/rest/services/uploadova";
            HttpResponse response1 = HttpRequest.get(url1)
                    .timeout(5000)
                    .execute();
            int statusCode1 = response1.getStatus();
            String body1 = response1.body();

            String url2 = targetUrl + "/ui/vropspluginui/rest/services/getstatus";
            HttpResponse response2 = HttpRequest.get(url2)
                    .timeout(5000)
                    .execute();
            int statusCode2 = response2.getStatus();
            String body2 = response2.body();
            if (statusCode1 == 200 && (statusCode1 == 200 && body2.contains("States") && body2.contains("Install Progress"))) {
                return " [+] 目标存在 CVE-2021-21972 漏洞!";
            }else{
                return " [-] 目标未发现 CVE-2021-21972 漏洞!";
            }

        } catch (Exception e) {
            return " [-] 检测 CVE-2021-21972 时发生错误 " + e.getMessage();
        }
    }
    /**
     * CVE-2021-21985 漏洞检测
     * @param targetUrl 目标 URL
     * @return 漏洞检测结果
     */
    private String scanForCVE202121985(String targetUrl) {
        try{
            String url = targetUrl + "/ui/h5-vsan/rest/proxy/service/systemProperties/getProperty";
            HttpResponse response = HttpRequest.get(url)
                    .timeout(5000)
                    .execute();
            int statusCode = response.getStatus();
            String body = response.body();
            if (statusCode == 405){
                return " [+] 目标存在 CVE-2021-21985 漏洞!";
            }else{
                return " [-] 目标未发现 CVE-2021-21985 漏洞!";
            }
        } catch (Exception e) {
            return " [-] 检测 CVE-2021-21985 时发生错误 " + e.getMessage();
        }
    }
}
